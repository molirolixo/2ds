**O jogador 1 é controlado pelo W/S e o jogador 2 pelas Setas direcionais UP e DOWN, a ideia é que o jogo seja jogador por
duas pessoas**

Bola.java

package pingponga;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.util.Random;

public class Bola implements Runnable {

	int x, y, xDirection, yDirection;

	Rectangle bola;

	int p1ponto, p2ponto;

	Jogador p1 = new Jogador(10, 25, 1);
	Jogador p2 = new Jogador(485, 25, 2);

	public Bola(int xBall, int yBall) {
		p1ponto = p2ponto = 0;
		this.x = xBall;
		this.y = yBall;

		Random r = new Random();
		moveBola(r);

		bola = new Rectangle(this.x, this.y, 15, 15);
	}

	private void moveBola(Random r) {
		int rXDir = r.nextInt(1);
		if (rXDir == 0)
			rXDir--;
		setxDirection(rXDir);
		int rYDir = r.nextInt(1);
		if (rYDir == 0)
			rYDir--;
		setyDirection(rYDir);
	}

	public void draw(Graphics gb) {
		gb.setColor(Color.YELLOW);
		gb.fillOval(bola.x, bola.y, 15, 15);
	}

	public void setxDirection(int xDirection) {
		this.xDirection = xDirection;
	}

	public void setyDirection(int yDirection) {
		this.yDirection = yDirection;
	}

	@Override
	public void run() {
		try {
			while (Game.isJogo()) {
				move();
				Thread.sleep(8);
			}
		} catch (Exception e) {
			Game.setJogo(false);
		}

	}

	private void move() {
		colisao();
		bola.x += xDirection;
		bola.y += yDirection;

		if (bola.x <= 0) {
			setxDirection(+1);
			p2ponto++;
			bola.setLocation(x, y);
		}
		if (bola.x >= 485) {
			setxDirection(-1);
			p1ponto++;
			bola.setLocation(x, y);
		}
		if (bola.y <= 15) {
			setyDirection(+1);
		}
		if (bola.y >= 385) {
			setyDirection(-1);
		}

	}

	private void colisao() {
		if(bola.intersects(p1.jogador))
			setxDirection(+1);
		if(bola.intersects(p2.jogador))
			setxDirection(-1);
		
	}

}












Jogador.java


package pingponga;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;

public class Jogador implements Runnable {

	int x, y, yDirection, id;

	public Rectangle jogador;

	public Jogador(int xJogador, int yJogador, int idJogador) {
		this.x = xJogador;
		this.y = yJogador;
		this.id = idJogador;

		jogador = new Rectangle(x, y, 10, 50);
	}

	public int getyDirection() {
		return yDirection;
	}

	public void setyDirection(int yDirection) {
		this.yDirection = yDirection;
	}

	@Override
	public void run() {
		try {
			while (true) {
				move();
				Thread.sleep(7);
			}
		} catch (Exception e) {

		}

	}

	private void move() {
		jogador.y += getyDirection();
		if (jogador.y <= 30) {
			jogador.y = 30;
		}
		if (jogador.y >= 340) {
			jogador.y = 340;
		}
	}
	
	public void draw(Graphics g) {
		switch(id) {
		default:
			System.out.println("Não é um ID valido");
			break;
		case 1:
			g.setColor(Color.GREEN);
			g.fillRect(jogador.x, jogador.y, jogador.width, jogador.height);
			break;
		case 2:
			g.setColor(Color.RED);
			g.fillRect(jogador.x, jogador.y, jogador.width, jogador.height);
			break;
		}
	}
	
	public void keyPressed(KeyEvent e) {
		switch(id) {
		default:
			System.out.println("Não é um ID valido");
			break;
		case 1:
			if(e.getKeyCode() == KeyEvent.VK_W)
				setyDirection(-1);
			if(e.getKeyCode() == KeyEvent.VK_S)
				setyDirection(1);
			break;
		case 2:
			if(e.getKeyCode() == KeyEvent.VK_UP)
				setyDirection(-1);
			if(e.getKeyCode() == KeyEvent.VK_DOWN)
				setyDirection(1);
			break;
		}
	}
	
	public void keyReleased(KeyEvent e) {
		switch(id) {
		default:
			System.out.println("Não é um ID valido");
			break;
		case 1:
			if(e.getKeyCode() == KeyEvent.VK_W)
				setyDirection(0);
			if(e.getKeyCode() == KeyEvent.VK_S)
				setyDirection(0);
			break;
		case 2:
			if(e.getKeyCode() == KeyEvent.VK_UP)
				setyDirection(0);
			if(e.getKeyCode() == KeyEvent.VK_DOWN)
				setyDirection(0);
			break;
		}
	}

}
















Game.java


package pingponga;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;

public class Game extends JFrame{
	private static final long serialVersionUID = 1L;

	int gWidth = 505;
	int gHeight = 400;
	Dimension screenSize = new Dimension(gWidth, gHeight);

	Image dbImage;
	Graphics dbGraphics;

	static boolean jogo = true;
	boolean gameOver;

	static Bola b = new Bola(250, 200);

	public Game() {
		this.setTitle("PingaPonga");
		this.setSize(screenSize);
		this.setResizable(false);
		this.setVisible(true);
		this.setBackground(Color.DARK_GRAY);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.addKeyListener(new AL());
	}

	public static void main(String[] args) {

		Game pg = new Game();
		Thread bola = new Thread(b);
		bola.start();
		Thread p1 = new Thread(b.p1);
		Thread p2 = new Thread(b.p2);
		p2.start();
		p1.start();

	}

	@Override
	public void paint(Graphics g) {
		dbImage = createImage(getWidth(), getHeight());
		dbGraphics = dbImage.getGraphics();
		draw(dbGraphics);
		g.drawImage(dbImage, 0, 0, this);
	}

	public void draw(Graphics g) {
		b.draw(g);
		b.p1.draw(g);
		b.p2.draw(g);
		getScore(g);
		repaint();
	}

	private void getScore(Graphics g) {
		g.setColor(Color.WHITE);
		g.drawString("Jogador 1 || " + b.p1ponto, 40, 40);
		g.drawString("Jogador 2 || " + b.p2ponto, 385, 40 );
		g.setColor(Color.WHITE);
		if (b.p1ponto >= 6 || b.p2ponto >= 6) {
			setJogo(false);
			gameOver = true;
		}
		if (gameOver)
			g.drawString("Game Over", 200, 200);
		g.setColor(Color.WHITE);
	}

	public class AL extends KeyAdapter {
		@Override
		public void keyPressed(KeyEvent e) {
			b.p1.keyPressed(e);
			b.p2.keyPressed(e);
		}

		@Override
		public void keyReleased(KeyEvent e) {
			b.p1.keyReleased(e);
			b.p2.keyReleased(e);
		}

	}

	public static boolean isJogo() {
		return jogo;
	}

	public boolean isGameOver() {
		return gameOver;
	}

	public static void setJogo(boolean jogo) {
		Game.jogo = jogo;
	}
}